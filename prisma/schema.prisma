// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String      @id @default(uuid())
  email     String      @unique
  provider  Provider
  streams   Stream[]    @relation("UserStreams")  // Explicit relation name for clarity
  upvotes   Upvote[]    @relation("UserUpvotes")
}

model Stream {
  id            String      @id @default(uuid())
  type          StreamType
  url           String
  extractedId   String
  title         String       @default("")
  smallImg      String       @default("")
  bigImg        String       @default("")
  active        Boolean      @default(true)
  played        Boolean      @default(false)
  playedTs      DateTime?
  createAt      DateTime     @default(now())
  upvotes       Upvote[]     @relation("StreamUpvotes")
  userId        String
  user          User         @relation(fields: [userId], references: [id], name: "UserStreams")
  currentStream CurrentStream?
}

model CurrentStream {
  userId       String    @id
  streamId     String?   @unique
  stream       Stream?   @relation(fields: [streamId], references: [id])
}

model Upvote {
  id        String      @id @default(uuid())
  userId    String
  streamId  String
  user      User        @relation(fields: [userId], references: [id], name: "UserUpvotes")
  stream    Stream      @relation(fields: [streamId], references: [id], onDelete: Cascade, name: "StreamUpvotes")
  @@unique([userId, streamId])
}

enum StreamType {
  Spotify
  Youtube
}

enum Provider {
  Google
}
